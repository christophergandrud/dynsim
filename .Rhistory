# Run simulations
Sim2 <- dynsim(obj = M1, ldv = "InvestLag", scen = ScenComb, n = 20,
shocks = mShocks)
# Plot
dynsimGG(Sim2, leg.labels = Labels)
# Plot with accompanying shock plot
dynsimGG(Sim2, leg.labels = Labels, shockplot.var = "kstock")
dynsimGG(Sim2, leg.labels = Labels, shockplot.var = "kstock")
library(dynsim)
dynsimGG(Sim2, leg.labels = Labels, shockplot.var = "kstock")
library(dynsim)
Test <- dynsimGG(Sim2, leg.labels = Labels, shockplot.var = "kstock")
ggsave(Test, file = "~/Desktop/Test.pdf")
library(dynsim)
# Load packages
library(Zelig)
library(DataCombine)
# Load Grunfeld data
data(grunfeld, package = "dynsim")
# Create lag invest variable
grunfeld <- slide(grunfeld, Var = "invest", GroupVar = "company",
NewVar = "InvestLag")
# Estimate basic model
M1 <- zelig(invest ~ InvestLag + mvalue + kstock,
model = "ls", data = grunfeld, cite = FALSE)
# Set up scenarios
attach(grunfeld)
Scen1 <- data.frame(InvestLag = mean(InvestLag, na.rm = TRUE),
mvalue = quantile(mvalue, 0.05), kstock = quantile(kstock, 0.05))
Scen2 <- data.frame(InvestLag = mean(InvestLag, na.rm = TRUE),
mvalue = mean(mvalue), kstock = mean(kstock))
Scen3 <- data.frame(InvestLag = mean(InvestLag, na.rm = TRUE),
mvalue = quantile(mvalue, 0.95), kstock = quantile(kstock, 0.95))
detach(grunfeld)
# Combine into a single list
ScenComb <- list(Scen1, Scen2, Scen3)
## Run dynamic simulations without shocks
Sim1 <- dynsim(obj = M1, ldv = "InvestLag", scen = ScenComb, n = 20)
# Create plot legend label
Labels <- c("5th Percentile", "Mean", "95th Percentile")
# Plot
dynsimGG(Sim1, leg.labels = Labels)
## Run dynamic simulations with shocks
# Create data frame of shock values
mShocks <- data.frame(times = c(5, 10), kstock = c(100, 1000))
# Run simulations
Sim2 <- dynsim(obj = M1, ldv = "InvestLag", scen = ScenComb, n = 20,
shocks = mShocks)
# Plot
dynsimGG(Sim2, leg.labels = Labels)
# Plot with accompanying shock plot
dynsimGG(Sim2, leg.labels = Labels, shockplot.var = "kstock")
###############
# Replication file for: dynsim: An R implementation of autoregressive relationships
# Christopher Gandrud
# 24 December 2013
###############
# Set up:
## Requires R version 3.0.2
## The replication requies that the R packages Zelig, DataCombine, and dynsim be installed from CRAN.
# Load required packages
library(Zelig)
library(DataCombine)
library(dynsim)
# Set working directory
setwd("~/Dropbox/dynsimRwriteUp/Examples/")
# Load example data
data(grunfeld, package = "dynsim")
# Create lagged investment variable
grunfeld <- slide(grunfeld, Var = "invest", GroupVar = "company",
NewVar = "InvestLag")
# Estimate basic model
M1 <- zelig(invest ~ InvestLag + mvalue + kstock,
model = "ls", data = grunfeld, cite = FALSE)
# Create simulation scenarios
attach(grunfeld)
Scen1 <- data.frame(InvestLag = mean(InvestLag, na.rm = TRUE),
mvalue = quantile(mvalue, 0.95),
kstock = quantile(kstock, 0.95))
Scen2 <- data.frame(InvestLag = mean(InvestLag, na.rm = TRUE),
mvalue = mean(mvalue),
kstock = mean(kstock))
Scen3 <- data.frame(InvestLag = mean(InvestLag, na.rm = TRUE),
mvalue = quantile(mvalue, 0.05),
kstock = quantile(kstock, 0.05))
detach(grunfeld)
# Combine into a single list
ScenComb <- list(Scen1, Scen2, Scen3)
# Run simulations with no shocks
Sim1 <- dynsim(obj = M1, ldv = "InvestLag", scen = ScenComb, n = 20)
## Model with mvalue shocks
# Keep only the first company's mvalue for the first 15 years
grunfeldshock <- subset(grunfeld, company == 1)
grunfeldshock <- grunfeldshock[1:15, "mvalue"]
# Create data frame for the shock argument
grunfeldshock <- data.frame(times = 1:15, mvalue = grunfeldshock)
# Run simulations with mvalue shocks
Sim2 <- dynsim(obj = M1, ldv = "InvestLag", scen = ScenComb, n = 15,
shocks = grunfeldshock)
#### Plot simulations ####
Labels <- c("95th Percentile", "Mean", "5th Percentile")
dynsimGG(Sim2, leg.name = "Scenarios", leg.labels = Labels, color = "OrRd",
ylab = "Predicted Real Gross Investment\n", shockplot.var = "mvalue",
shockplot.ylab = "Firm Value")
Test <- dynsimGG(Sim2, leg.name = "Scenarios", leg.labels = Labels, color = "OrRd",
ylab = "Predicted Real Gross Investment\n", shockplot.var = "mvalue",
shockplot.ylab = "Firm Value")
Test
Test <- dynsimGG(Sim2, shockplot.var = "mvalue")
Test
?dynsimGG
# Load packages
library(Zelig)
library(DataCombine)
# Load Grunfeld data
data(grunfeld, package = "dynsim")
# Create lag invest variable
grunfeld <- slide(grunfeld, Var = "invest", GroupVar = "company",
NewVar = "InvestLag")
# Estimate basic model
M1 <- zelig(invest ~ InvestLag + mvalue + kstock,
model = "ls", data = grunfeld, cite = FALSE)
# Set up scenarios
attach(grunfeld)
Scen1 <- data.frame(InvestLag = mean(InvestLag, na.rm = TRUE),
mvalue = quantile(mvalue, 0.05), kstock = quantile(kstock, 0.05))
Scen2 <- data.frame(InvestLag = mean(InvestLag, na.rm = TRUE),
mvalue = mean(mvalue), kstock = mean(kstock))
Scen3 <- data.frame(InvestLag = mean(InvestLag, na.rm = TRUE),
mvalue = quantile(mvalue, 0.95), kstock = quantile(kstock, 0.95))
detach(grunfeld)
# Combine into a single list
ScenComb <- list(Scen1, Scen2, Scen3)
## Run dynamic simulations without shocks
Sim1 <- dynsim(obj = M1, ldv = "InvestLag", scen = ScenComb, n = 20)
# Create plot legend label
Labels <- c("5th Percentile", "Mean", "95th Percentile")
# Plot
dynsimGG(Sim1, leg.labels = Labels)
## Run dynamic simulations with shocks
# Create data frame of shock values
mShocks <- data.frame(times = c(5, 10), kstock = c(100, 1000))
# Run simulations
Sim2 <- dynsim(obj = M1, ldv = "InvestLag", scen = ScenComb, n = 20,
shocks = mShocks)
# Plot
dynsimGG(Sim2, leg.labels = Labels)
# Plot with accompanying shock plot
dynsimGG(Sim2, leg.labels = Labels, shockplot.var = "kstock")
dynsimGG(Sim2, leg.labels = Labels, shockplot.var = "kstock")
library(dynsim)
dynsimGG(Sim2, leg.labels = Labels, shockplot.var = "kstock")
library(dynsim)
dynsimGG(Sim2, leg.labels = Labels, shockplot.var = "kstock")
library(dynsim)
dynsimGG(Sim2, leg.labels = Labels, shockplot.var = "kstock")
# Load packages
library(Zelig)
library(DataCombine)
# Load Grunfeld data
data(grunfeld, package = "dynsim")
# Create lag invest variable
grunfeld <- slide(grunfeld, Var = "invest", GroupVar = "company",
NewVar = "InvestLag")
# Estimate basic model
M1 <- zelig(invest ~ InvestLag + mvalue + kstock,
model = "ls", data = grunfeld, cite = FALSE)
# Set up scenarios
attach(grunfeld)
Scen1 <- data.frame(InvestLag = mean(InvestLag, na.rm = TRUE),
mvalue = quantile(mvalue, 0.05), kstock = quantile(kstock, 0.05))
Scen2 <- data.frame(InvestLag = mean(InvestLag, na.rm = TRUE),
mvalue = mean(mvalue), kstock = mean(kstock))
Scen3 <- data.frame(InvestLag = mean(InvestLag, na.rm = TRUE),
mvalue = quantile(mvalue, 0.95), kstock = quantile(kstock, 0.95))
detach(grunfeld)
# Combine into a single list
ScenComb <- list(Scen1, Scen2, Scen3)
## Run dynamic simulations without shocks
Sim1 <- dynsim(obj = M1, ldv = "InvestLag", scen = ScenComb, n = 20)
# Create plot legend label
Labels <- c("5th Percentile", "Mean", "95th Percentile")
# Plot
dynsimGG(Sim1, leg.labels = Labels)
## Run dynamic simulations with shocks
# Create data frame of shock values
mShocks <- data.frame(times = c(5, 10), kstock = c(100, 1000))
# Run simulations
Sim2 <- dynsim(obj = M1, ldv = "InvestLag", scen = ScenComb, n = 20,
shocks = mShocks)
# Plot
dynsimGG(Sim2, leg.labels = Labels)
# Plot with accompanying shock plot
dynsimGG(Sim2, leg.labels = Labels, shockplot.var = "kstock")
library(dynsim)
# Load packages
library(Zelig)
library(DataCombine)
# Load Grunfeld data
data(grunfeld, package = "dynsim")
# Create lag invest variable
grunfeld <- slide(grunfeld, Var = "invest", GroupVar = "company",
NewVar = "InvestLag")
# Estimate basic model
M1 <- zelig(invest ~ InvestLag + mvalue + kstock,
model = "ls", data = grunfeld, cite = FALSE)
# Set up scenarios
attach(grunfeld)
Scen1 <- data.frame(InvestLag = mean(InvestLag, na.rm = TRUE),
mvalue = quantile(mvalue, 0.05), kstock = quantile(kstock, 0.05))
Scen2 <- data.frame(InvestLag = mean(InvestLag, na.rm = TRUE),
mvalue = mean(mvalue), kstock = mean(kstock))
Scen3 <- data.frame(InvestLag = mean(InvestLag, na.rm = TRUE),
mvalue = quantile(mvalue, 0.95), kstock = quantile(kstock, 0.95))
detach(grunfeld)
# Combine into a single list
ScenComb <- list(Scen1, Scen2, Scen3)
## Run dynamic simulations without shocks
Sim1 <- dynsim(obj = M1, ldv = "InvestLag", scen = ScenComb, n = 20)
# Create plot legend label
Labels <- c("5th Percentile", "Mean", "95th Percentile")
# Plot
dynsimGG(Sim1, leg.labels = Labels)
## Run dynamic simulations with shocks
# Create data frame of shock values
mShocks <- data.frame(times = c(5, 10), kstock = c(100, 1000))
# Run simulations
Sim2 <- dynsim(obj = M1, ldv = "InvestLag", scen = ScenComb, n = 20,
shocks = mShocks)
# Plot
dynsimGG(Sim2, leg.labels = Labels)
# Plot with accompanying shock plot
dynsimGG(Sim2, leg.labels = Labels, shockplot.var = "kstock")
library(dynsim)
library(dynsim)
# Load packages
library(Zelig)
library(DataCombine)
# Load Grunfeld data
data(grunfeld, package = "dynsim")
# Create lag invest variable
grunfeld <- slide(grunfeld, Var = "invest", GroupVar = "company",
NewVar = "InvestLag")
# Estimate basic model
M1 <- zelig(invest ~ InvestLag + mvalue + kstock,
model = "ls", data = grunfeld, cite = FALSE)
# Set up scenarios
attach(grunfeld)
Scen1 <- data.frame(InvestLag = mean(InvestLag, na.rm = TRUE),
mvalue = quantile(mvalue, 0.05), kstock = quantile(kstock, 0.05))
Scen2 <- data.frame(InvestLag = mean(InvestLag, na.rm = TRUE),
mvalue = mean(mvalue), kstock = mean(kstock))
Scen3 <- data.frame(InvestLag = mean(InvestLag, na.rm = TRUE),
mvalue = quantile(mvalue, 0.95), kstock = quantile(kstock, 0.95))
detach(grunfeld)
# Combine into a single list
ScenComb <- list(Scen1, Scen2, Scen3)
## Run dynamic simulations without shocks
Sim1 <- dynsim(obj = M1, ldv = "InvestLag", scen = ScenComb, n = 20)
# Create plot legend label
Labels <- c("5th Percentile", "Mean", "95th Percentile")
# Plot
dynsimGG(Sim1, leg.labels = Labels)
## Run dynamic simulations with shocks
# Create data frame of shock values
mShocks <- data.frame(times = c(5, 10), kstock = c(100, 1000))
# Run simulations
Sim2 <- dynsim(obj = M1, ldv = "InvestLag", scen = ScenComb, n = 20,
shocks = mShocks)
# Plot
dynsimGG(Sim2, leg.labels = Labels)
# Plot with accompanying shock plot
dynsimGG(Sim2, leg.labels = Labels, shockplot.var = "kstock")
library(dynsim)
?var
library(Zelig)
library(DataCombine)
library(dynsim)
# Set working directory
setwd("~/Dropbox/dynsimRwriteUp/Examples/")
# Load example data
data(grunfeld, package = "dynsim")
# Create lagged investment variable
grunfeld <- slide(grunfeld, Var = "invest", GroupVar = "company",
NewVar = "InvestLag")
# Estimate basic model
M1 <- zelig(invest ~ InvestLag + mvalue + kstock,
model = "ls", data = grunfeld, cite = FALSE)
names(M1)
names(summary(M1))
summary(M1)[6]
?predict
attach(grunfeld)
Scen1 <- data.frame(InvestLag = mean(InvestLag, na.rm = TRUE),
mvalue = quantile(mvalue, 0.95),
kstock = quantile(kstock, 0.95))
detach(grunfeld)
obj = M1
DV <- as.character(obj$formula[2])
DVmean <- data.frame(mean(obj$data[, DV]))
names(DVmean) <- DV
scenTemp <- Scen1
scenTemp <- cbind(DVmean, scenTemp)
ldvMean <- predict(object, scenTemp)
ldvMean <- predict(object = obj, newdata = scenTemp)
class(obj) <- 'lm'
ldvMean <- predict(object = obj, newdata = scenTemp)
summary(obj)
M1 <- zelig(invest ~ InvestLag + mvalue + kstock,
model = "ls", data = grunfeld, cite = FALSE)
summary(M1)
names(M1)
M2 <- lm(invest ~ InvestLag + mvalue + kstock, data = grunfeld)
names(M2)
names(M1[1])
Test = M1[1]
names(Test)
Test
Test = M1[2]
Test
Test = M1[3]
Test
Test = M1[4]
Test
Test = M1[5]
Test
Test = M1[7]
names(Test)
Test
obj = M2
ldvMean <- predict(object = obj, newdata = scenTemp)
ldvMean
ldvMean <- predict(object = obj, newdata = scenTemp, interval = 1)
ldvMean <- predict(object = obj, newdata = scenTemp, se.fit = TRUE)
ldvMean
ldvMean <- predict(object = obj, newdata = scenTemp, se.fit = TRUE, interval = '100')
ldvMean <- predict(object = obj, newdata = scenTemp, se.fit = TRUE, interval = 'none')
ldvMean
ldvMean <- predict(object = obj, newdata = scenTemp, level = 1)
ldvMean
ldvMean <- predict(object = obj, newdata = scenTemp, level = 100)
ldvMean
ldvMean <- predict(object = obj, newdata = scenTemp, level = 0.9)
ldvMean
ldvMean <- predict(object = obj, newdata = scenTemp, level = 0.9, interval = 'prediction')
ldvMean
ldvMean <- predict(object = obj, newdata = scenTemp, level = 0.94, interval = 'prediction')
ldvMean
ldvMean <- predict(object = obj, newdata = scenTemp, level = 0.1, interval = 'prediction')
ldvMean
perdict.lm
predict.lm
ldvMean <- predict(object = obj, newdata = scenTemp, level = 0.1, type = 'response')
ldvMean
ldvMean <- predict(object = obj, newdata = scenTemp, level = 0.1, se.fit = TRUE)
ldvMean
ldvMean[1]
Test <- ldvMean[1]
Test
Test[1]
Test[[1]]
Test[[2]]
Test[,1]
summary(Test)
Test + 1
Test$fit[1]
Test$fit[2]
class(ldvMean)
ldvMean <- predict(object = obj, newdata = scenTemp, level = 0.1)
as.numeric(ldvMean)
pred0 <- predict(object = obj, newdata = scenTemp, level = 1)
ldvMean <- as.numeric(pred0[1])
pred0 <- predict(object = obj, newdata = scenTemp, level = 1, se.fit = TRUE)
ldvMean <- as.numeric(pred0[1])
pred <- predict(object = obj, newdata = scenTemp, level = 1, se.fit = TRUE)
ldvMean <- as.numeric(pred0[1])
sigma.sqr <- as.numeric(pred0[2])
?Vars
library(vars)
install.packages('vars')
install.packages(c("chron", "expm", "forecast", "gtools", "igraph", "lme4", "minqa", "Rcpp", "rgl", "texreg"))
?Var
library(vars)
?Var
VAR
?VAR
names(CANADA)
names(Canada)
?pnorm
?qt
qt(df = 183, 0.5)
qt(df = 183, p =0.5)
dt(df = 183, p =0.5)
qt(df = 183, p =0.5)
qt(df = 5, p =0.5)
qt(df = 183, p =0.05)
qt(df = 1000, p =0.05)
qt(df = 1000, p =0.025)
qt(df = 1000, p =0.25)
pred <- predict(object = obj, newdata = scenTemp, level = 1, se.fit = TRUE)
pred
df <- as.numeric(pred0[3])
library(dynsim)
library(dynsim)
library(dynsim)
library(dynsim)
library(dynsim)
#############
# Replication file for: simPH: An R package for showing estimates for interactive and nonlinear effects from Cox proportional hazard models
# Requires R 3.0.2 or greater and simPH version 1.1 or greater
# Updated 1 March 2014
#############
# Load packages
library("survival")
library("simPH")
library("ggplot2")
library("gridExtra")
#### Illustration of linear effects####
# Load hmohiv data from UCLA repository
hmohiv <- read.table(
"http://www.ats.ucla.edu/stat/r/examples/asa/hmohiv.csv",
sep = ",", header = TRUE)
# Center age at its median (35)
hmohiv$AgeMed <- hmohiv$age - 35
M1 <- coxph(Surv(time, censor) ~ AgeMed + drug,
method = "breslow", data = hmohiv)
# Simulate relative hazards
Sim1 <- coxsimLinear(M1, b = "AgeMed", Xj = seq(-15, 19, by = 0.2))
###############
# Replication file for: dynsim: An R implementation of autoregressive relationships
# Christopher Gandrud
# 1 March 2014
###############
# Set up:
## Requires R version 3.0.2
## The replication requires that the R packages Zelig, DataCombine, and dynsim are already installed from CRAN.
# Load required packages
library(Zelig)
library(DataCombine)
library(dynsim)
# Set working directory
setwd("~/Dropbox/dynsimRwriteUp/Examples/")
# Load example data
data(grunfeld, package = "dynsim")
# Create lagged investment variable
grunfeld <- slide(grunfeld, Var = "invest", GroupVar = "company",
NewVar = "InvestLag")
# Estimate basic model
M1 <- zelig(invest ~ InvestLag + mvalue + kstock,
model = "ls", data = grunfeld, cite = FALSE)
# Create simulation scenarios
attach(grunfeld)
Scen1 <- data.frame(InvestLag = mean(InvestLag, na.rm = TRUE),
mvalue = quantile(mvalue, 0.95),
kstock = quantile(kstock, 0.95))
Scen2 <- data.frame(InvestLag = mean(InvestLag, na.rm = TRUE),
mvalue = mean(mvalue),
kstock = mean(kstock))
Scen3 <- data.frame(InvestLag = mean(InvestLag, na.rm = TRUE),
mvalue = quantile(mvalue, 0.05),
kstock = quantile(kstock, 0.05))
detach(grunfeld)
# Combine into a single list
ScenComb <- list(Scen1, Scen2, Scen3)
# Run simulations with no shocks
Sim1 <- dynsim(obj = M1, ldv = "InvestLag", scen = ScenComb, n = 20)
## Model with mvalue shocks
# Keep only the mvalue for the first company for the first 15 years
grunfeldsub <- subset(grunfeld, company == 1)
grunfeldshock <- grunfeldsub[1:15, "mvalue"]
# Create data frame for the shock argument
grunfeldshock <- data.frame(times = 1:15, mvalue = grunfeldshock)
# Run simulations with mvalue shocks
Sim2 <- dynsim(obj = M1, ldv = "InvestLag", scen = ScenComb, n = 15,
shocks = grunfeldshock)
# Estimate model with mvalue shocks and an interaction with kstock
M2 <- zelig(invest ~ InvestLag + mvalue*kstock,
model = "ls", data = grunfeld, cite = FALSE)
# Run simulations with mvalue shocks and an interaction with kstock
Sim3 <- dynsim(obj = M2, ldv = "InvestLag", scen = ScenComb, n = 15,
shocks = grunfeldshock)
#### Plot simulations ####
# Plot Sim1 simulations
pdf(file = 'figures/Sim1Default.pdf')
dynsimGG(Sim1)
dev.off()
# Plot Sim1 simulations with labels
pdf(file = 'figures/Sim1Labels.pdf')
# Create legend labels vector
Labels <- c("95th Percentile", "Mean", "5th Percentile")
# Plot
dynsimGG(Sim1, leg.name = "Scenarios", leg.labels = Labels, color = "OrRd",
ylab = "Predicted Real Gross Investment\n")
dev.off()
# Plot Sim2 with shockplot
pdf(file = 'figures/Sim2Shockplot.pdf')
# Plot
dynsimGG(Sim2, leg.name = "Scenarios", leg.labels = Labels, color = "OrRd",
ylab = "Predicted Real Gross Investment\n", shockplot.var = "mvalue",
shockplot.ylab = "Firm Value")
dev.off()
# Plot Sim3 with shockplot
pdf(file = 'figures/Sim3Shockplot.pdf')
# Plot
dynsimGG(Sim3, leg.name = "Scenarios", leg.labels = Labels, color = "OrRd",
ylab = "Predicted Real Gross Investment\n", shockplot.var = "mvalue",
shockplot.ylab = "Firm Value")
dev.off()
?rmarkdown
?dynsim
?rmarkdown
??rmarkdown
