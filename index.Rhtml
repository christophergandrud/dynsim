<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
        <title>dynsim</title>
        <meta name="dynsimVignette" content="dynsim: dynamic simulations of autoregressive relationships.">
        <link rel="stylesheet" href="css/main.css">
        <link href="css/bootstrap-responsive.min.css" rel="stylesheet">
        <link rel="stylesheet" href="css/bootstrapMod.css" media="screen">
        <link href="css/bootswatch.css" rel="stylesheet">
    </head>

<body>

<!--begin.rcode include=FALSE
opts_chunk$set(fig.align='center')
opts_chunk$set(dev='svg')
end.rcode-->

<!----------------------------- Header ------------------------------>

<div id="topbar"><strong><code>dynsim</code>:</strong></div> <div id="topbarsub">dynamic simulations of autoregressive relationships</div>

<p>Laron K Williams, Guy D Whitten, and <a href="http://christophergandrud.blogspot.com/p/biocontact.html">Christopher Gandrud</a></p>

<p>15 March 2014</p>

<hr>

<!----------------------------- Basic description ------------------------------>
<div id='maindescript'>
<blockquote>
    <p><strong><code>dynsim</code></strong> implements <a href="http://web.missouri.edu/~williamslaro/Williams%20and%20Whitten%202012.pdf">Williams and Whitten's (2012)</a> method for dynamic simulations of autoregressive relationships.</p> 

    <p>It is available for both R and Stata. The general functionality is the same for the two versions of the software. The examples below describe how to use the different versions of the package.</p>
</blockquote>
</div>

<!----------------------------- Tabbed Examples ------------------------------>
<ul class="nav nav-tabs" id="tableTabs">
    <li class="active"><a href="#R" data-toggle="tab">R</a></li>
    <li class=""><a href="#Stata" data-toggle="tab">Stata</a></li> 
</ul>

<!----------------------------- R ------------------------------>
<div class="tab-content">
    <div class="tab-pane fade active in" id="R">

<p class="pull-left">Version <a href="http://cran.at.r-project.org/web/packages/dynsim/index.html">0.2.3</a></p> <p class="pull-right">Fork it on <a href="https://github.com/christophergandrud/dynsim">GitHub</a></p>

<br/>

<h2 id="process">Process</h2>

<p>There are four basic steps to use <strong><code>dynsim</code></strong> to create dynamic simulations of autoregressive relationships:</p>

<ol style="list-style-type: decimal">
    <li><p><em>Estimate</em> your linear model using <code>zelig</code> from the <code><a href="http://gking.harvard.edu/zelig">Zelig</a></code> package.</p></li>
    <li><p><em>Set up starting values</em> for simulation scenarios and (optionally) shock values at particular iterations (e.g. points in forecasted time).</p></li>
    <li><p><em>Simulate</em> these scenarios based on the estimated model using the <code>dynsim</code> function.</p></li>
    <li><p><em>Plot</em> the simulation results with the <code>dynsimGG</code> function.</p></li>
</ol>

<h2 id="examples">Examples</h2>

<p>To see how dynsim works, let's go through a few examples. We will use the Grunfeld (1958) data set. It is included with dynsim.</p> 

<p>First let's load the packages we will use:</p>

<!--begin.rcode message=FALSE
library(dynsim)
library(DataCombine)
library(Zelig)
end.rcode-->

<p>Now let's load the data:</p>

<!--begin.rcode
data(grunfeld, 
    package = 'dynsim')
end.rcode-->

<p>The linear regression model we will estimate is:</p>

\[I_{it} = \alpha + \beta_{1}I_{it-1} + \beta_{2}F_{it} + \beta_{3}C_{it} + \mu_{it} \]


<p>where \(I_{it}\) is real gross investment for firm \(i\) in year \(t\). \(I_{it-1}\) is the firm's investment in the previous year. \(F_{it}\) is the real value of the firm and \(C_{it}\) is the real value of the capital stock.</p>  

<p>In the <code>grunfeld</code> data set real gross investment is denoted <code>invest</code>, the firm's market value is <code>mvalue</code>, and the capital stock is <code>kstock</code>. There are 10 large US manufacturers from 1935-1954 in the data set. The variable identifying the individual companies is called <code>company</code>. We can easily create the investment one-year lag using the <code>slide</code> command from the <a href="https://github.com/christophergandrud/DataCombine">DataCombine</a> package. Here is the code:</p>

<!--begin.rcode message=FALSE, tidy=FALSE
grunfeld <- slide(grunfeld, Var = 'invest', 
               GroupVar = 'company',
               NewVar = 'InvestLag')

end.rcode-->

<p>The new lagged variable is called <code>InvestLag</code>.</p>

<h3>Dynamic simulation without shocks</h3>

<p>Now that we have created our lag variable we, can begin to create dynamic simulations with <strong><code>dynsim</code></strong> by estimating the underlying linear regression model using <strong><code>Zelig</code></strong>, i.e.:</p>

<!--begin.rcode message=FALSE, tidy=FALSE
M1 <- zelig(invest ~ InvestLag + mvalue + kstock,
            model = 'ls', data = grunfeld, cite = FALSE)
end.rcode-->

<p>We can use the resulting model object <code>M1</code> in the dynsim command to run our dynamic simulations. We first need to create a list object containing data frames with starting values for each simulation scenario. Imagine we want to run three contrasting scenarios with the following fitted values:
</p>

<ul>
    <li>Scenario 1: mean lagged investment, market value and capital stock held at their 95th percentiles,</li>
    <li>Scenario 2: all variables held at their means,</li>
    <li>Scenario 3: mean lagged investment, market value and capital stock held at their 5th
percentiles.</li>
</ul>

<p>We can create a list object for the scen argument containing each of these scenarios with the following code:</p>

<!--begin.rcode message=FALSE, tidy=FALSE
# Create simulation scenarios
attach(grunfeld)
Scen1 <- data.frame(InvestLag = mean(InvestLag, na.rm = TRUE),
                    mvalue = quantile(mvalue, 0.95),
                    kstock = quantile(kstock, 0.95))
Scen2 <- data.frame(InvestLag = mean(InvestLag, na.rm = TRUE),
                    mvalue = mean(mvalue),
                    kstock = mean(kstock))
Scen3 <- data.frame(InvestLag = mean(InvestLag, na.rm = TRUE),
                    mvalue = quantile(mvalue, 0.05),
                    kstock = quantile(kstock, 0.05))
detach(grunfeld)

# Combine into a single list
ScenComb <- list(Scen1, Scen2, Scen3)
end.rcode-->

<p>In this example we won't introduce shocks, so now we run our simulations:</p>

<!--begin.rcode message=FALSE, tidy=FALSE
Sim1 <- dynsim(obj = M1, ldv = 'InvestLag', 
                scen = ScenComb, n = 20)
end.rcode-->

<p>This took 1000 draws of the coefficients to produce 20 dynamic simulation iterations for each of the three scenarios. In the resulting <code>Sim1</code> object we have retained the middle 95% and 50%. We will return to presenting and exploring the contents of <code>Sim1</code> later in this section.</p>

<h3>Dynamic simulation with shocks</h3>

<p>Now let's include fitted shock values. In particular, let's see how a company with capital stock in the 5th percentile is predicted to change its gross investment when its market value experiences shocks compared to a company with capital stock in the 95th percentile. We will use market values for the first company in the grunfeld data set over the first 15 years as the shock values. To create the shock data use the following code:</p>

<!--begin.rcode message=FALSE, tidy=FALSE
# Keep only the mvalue for the first company 
# for the first 15 years
grunfeldsub <- subset(grunfeld, company == 1)
grunfeldshock <- grunfeldsub[1:15, 'mvalue']

# Create data frame for the shock argument
grunfeldshock <- data.frame(times = 1:15, 
                    mvalue = grunfeldshock)
end.rcode-->

<p>Now we can simply add <code>grunfeldshock</code> to the dynsim shocks argument.</p>

<!--begin.rcode message=FALSE, tidy=FALSE
Sim2 <- dynsim(obj = M1, ldv = 'InvestLag', 
               scen = ScenComb, n = 15,
               shocks = grunfeldshock)
end.rcode-->

<p>Now we can simply add grunfeldshock to the dynsim <code>shocks</code> argument.</p>

<!--begin.rcode message=FALSE, tidy=FALSE
Sim3 <- dynsim(obj = M1, ldv = 'InvestLag', 
               scen = ScenComb, n = 15,
               shocks = grunfeldshock)
end.rcode-->

<h3>Plotting simulations</h3>

<p>Probably the easiest and most effective way to communicate your <strong><code>dynsim</code></strong> simulation results is with the package’s built-in plotting capabilities. These are accessed with the <code>dysnsimGG</code> command. Let’s start by plotting the simulations from our basic model. In an earlier example we put these results into <code>Sim1</code>. Using <code>dynsimGG</code>'s default settings we can plot the simulations with the following code:
</p>

<!--begin.rcode
dynsimGG(Sim1)
end.rcode-->

<p>We can make a number of aesthetic changes. For example, we can re-title the legend using the <code>leg.name</code> argument and change the legend values by adding a vector of the desired label names in the order of our scenarios using the <code>leg.labels</code> argument. We can also change the color palette using the <code>color</code> argument. Let’s use the 'orange-red' palette denoted by <code>OrRd</code>. Finally, we can change the y-axis label with the <code>ylab</code> argument so that it is more descriptive. 
</p>

</div>

<!----------------------------- Stata ------------------------------>

<div class="tab-pane fade" id="Stata">
    <h3 align="center">The Stata Examples section is under development.</h3> 
    <p>For more information about the Stata version of <strong><code>dynsim</code></strong> please see <a href="http://www.stata-journal.com/article.html?article=st0242">Williams and Whitten's (2011)</a>.</p>        
</div>

</div>

<!----------------------------- Footer ------------------------------>

    <footer><hr><a href="https://github.com/christophergandrud">Christopher Gandrud</a> (2014)</div></footer>


<!----------------------------- Scripts ----------------------------->

<!-- Tabs with Bootstrap -->

<script type="text/javascript" src="js/jQuery.min.js"></script>
<script type="text/javascript" src="js/bootstrap.min.js"></script>

<script>
  $(function () {
    $('#Basic a:first').tab('show')
  })
</script>

<!-- dynamically load mathjax for compatibility with --self-contained -->
<script>
  (function () {
    var script = document.createElement("script");
    script.type = "text/javascript";
    script.src  = "https://c328740.ssl.cf1.rackcdn.com/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML";
    document.getElementsByTagName("head")[0].appendChild(script);
  })();
</script>

<!-- Google Analytics tracking -->
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-48683594-1', 'christophergandrud.github.io');
  ga('send', 'pageview');

</script>

</html>
