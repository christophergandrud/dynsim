<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
        <title>dynsim</title>
        <meta name="dynsimVignette" content="dynsim: dynamic simulations of autoregressive relationships.">
        <link rel="stylesheet" href="css/main.css">
        <link rel="stylesheet" href="css/images.css">
        <link href="css/bootstrap-responsive.min.css" rel="stylesheet">
        <link rel="stylesheet" href="css/bootstrapMod.css" media="screen">
        <link href="css/bootswatch.css" rel="stylesheet">
        <link href="http://netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css" rel="stylesheet">
    </head>

<body>

<!--begin.rcode include=FALSE
opts_chunk$set(fig.align='center')
opts_chunk$set(dev='svg')
opts_chunk$set(tidy=FALSE)
opts_chunk$set(message=FALSE)
end.rcode-->

<!----------------------------- Header ------------------------------>

<div id="rect01"></div>

<!-- Header -->
<div id="topbar"><strong><code>dynsim</code>:</strong></div> <div id="topbarsub">dynamic simulations of autoregressive relationships</div>

<p><a href="http://web.missouri.edu/~williamslaro/">Laron K Williams</a>, <a href="http://politicalscience.tamu.edu/html/bio--whitten.html">Guy D Whitten</a>, and <a href="http://christophergandrud.blogspot.com/p/biocontact.html">Christopher Gandrud</a></p>

<p>15 March 2014</p> 

<br>

<!-- Banner image -->
<div id="rect1"></div>
<div id="rect2"></div>
<div id="rect1"></div>

<!----------------------------- Basic description ------------------------------>
<div id='maindescript'>
<blockquote>
    <p><strong><code>dynsim</code></strong> implements <a href="http://web.missouri.edu/~williamslaro/Williams%20and%20Whitten%202012.pdf">Williams and Whitten's (2012)</a> method for dynamic simulations of autoregressive relationships. Building on work by <a href="http://gking.harvard.edu/files/abs/making-abs.shtml">King, Tomz, and Wittenberg (2000)</a>, <strong><code>dynsim</code></strong> depicts long-run simulations of dynamic processes for a variety of substantively interesting scenarios, with and without the presence of exogenous shocks.</p> 

    <p>The software package is available for both <a href="http://www.r-project.org/">R</a> and <a href="http://www.stata.com/">Stata</a>. The general functionality is the same for the two versions of the software, though the syntax differs. The examples below illustrate how to use the different versions of the package.</p>

    <p>The examples are drawn directly from <a href="http://dx.doi.org/10.6084/m9.figshare.962949">Gandrud, Williams, and Whitten (working paper)</a> for the R version and <a href="http://www.stata-journal.com/article.html?article=st0242">Williams and Whitten (2011)</a> for the Stata version.</p>
</blockquote>
</div>

<!----------------------------- Tabbed Examples ------------------------------>
<ul class="nav nav-tabs" id="tableTabs">
    <li class="active"><a href="#R" data-toggle="tab">R</a></li>
    <li class=""><a href="#Stata" data-toggle="tab">Stata</a></li> 
</ul>

<!----------------------------- R ------------------------------>
<div class="tab-content">
    <div class="tab-pane fade active in" id="R">

<p class="pull-left"><strong>Version <a href="http://cran.at.r-project.org/web/packages/dynsim/index.html">0.2.4</a></strong></p> <p class="pull-right"><strong>Fork me on <a href="https://github.com/christophergandrud/dynsim"><i class="fa fa-github fa-lg"></i></a></strong></p>

<br/>

<hr>

<div id="navcontainer">
    <ul id="navlist">
    <li><a href="#process">Process <i class="fa fa-sort-numeric-asc"></i></a></li> 
    <li><a href="#examples">Examples <i class="fa fa-code"></i></a></li> 
    <li><a href="#install">Install <i class="fa fa-download"></i></a></li>
    </ul>
</div>

<hr>

<h2 id="process">Process</h2>

<p>There are four basic steps to use <strong><code>dynsim</code></strong> to create dynamic simulations of autoregressive relationships:</p>

<ol style="list-style-type: decimal">
    <li><p><em>Estimate</em> your linear model using <code>zelig</code> from the <code><a href="http://gking.harvard.edu/zelig">Zelig</a></code> package.</p></li>
    <li><p><em>Set up starting values</em> for simulation scenarios and (optionally) shock values at particular iterations (e.g. points in forecasted time).</p></li>
    <li><p><em>Simulate</em> these scenarios based on the estimated model using the <code>dynsim</code> function.</p></li>
    <li><p><em>Plot</em> the simulation results with the <code>dynsimGG</code> function.</p></li>
</ol>

<h2 id="examples">Examples</h2>

<p>To see how dynsim works, let's go through a few examples. We will use the Grunfeld (1958) data set. It is included with <strong><code>dynsim</code></strong>.</p> 

<p>First let's load the packages we will use:</p>

<!--begin.rcode
library(dynsim)
library(DataCombine)
library(Zelig)
end.rcode-->

<p>Now let's load the data:</p>

<!--begin.rcode
data(grunfeld, package = 'dynsim')
end.rcode-->

<p>The linear regression model we will estimate is:</p>

\[I_{it} = \alpha + \beta_{1}I_{it-1} + \beta_{2}F_{it} + \beta_{3}C_{it} + \mu_{it} \]


<p>where \(I_{it}\) is real gross investment for firm \(i\) in year \(t\). \(I_{it-1}\) is the firm's investment in the previous year. \(F_{it}\) is the real value of the firm and \(C_{it}\) is the real value of the capital stock.</p>  

<p>In the <code>grunfeld</code> data set real gross investment is denoted <code>invest</code>, the firm's market value is <code>mvalue</code>, and the capital stock is <code>kstock</code>. There are 10 large US manufacturers from 1935-1954 in the data set. The variable identifying the individual companies is called <code>company</code>. We can easily create the investment one-year lag using the <code>slide</code> command from the <a href="https://github.com/christophergandrud/DataCombine">DataCombine</a> package. Here is the code:</p>

<!--begin.rcode
grunfeld <- slide(grunfeld, Var = 'invest', 
               GroupVar = 'company',
               NewVar = 'InvestLag')

end.rcode-->

<p>The new lagged variable is called <code>InvestLag</code>.</p>

<h3>Dynamic simulation without shocks</h3>

<p>Now that we have created our lag variable we, can begin to create dynamic simulations with <strong><code>dynsim</code></strong> by estimating the underlying linear regression model using <strong><code>Zelig</code></strong>, i.e.:</p>

<!--begin.rcode
M1 <- zelig(invest ~ InvestLag + mvalue + kstock,
            model = 'ls', data = grunfeld, cite = FALSE)
end.rcode-->

<p>We can use the resulting model object <code>M1</code> in the dynsim command to run our dynamic simulations. We first need to create a list object containing data frames with starting values for each simulation scenario. Imagine we want to run three contrasting scenarios with the following fitted values:
</p>

<ul>
    <li>Scenario 1: mean lagged investment, market value and capital stock held at their 95th percentiles,</li>
    <li>Scenario 2: all variables held at their means,</li>
    <li>Scenario 3: mean lagged investment, market value and capital stock held at their 5th
percentiles.</li>
</ul>

<p>We can create a list object for the scen argument containing each of these scenarios with the following code:</p>

<!--begin.rcode
# Create simulation scenarios
attach(grunfeld)
Scen1 <- data.frame(InvestLag = mean(InvestLag, 
                                 na.rm = TRUE),
                    mvalue = quantile(mvalue, 0.95),
                    kstock = quantile(kstock, 0.95))
Scen2 <- data.frame(InvestLag = mean(InvestLag, 
                                 na.rm = TRUE),
                    mvalue = mean(mvalue),
                    kstock = mean(kstock))
Scen3 <- data.frame(InvestLag = mean(InvestLag, 
                                 na.rm = TRUE),
                    mvalue = quantile(mvalue, 0.05),
                    kstock = quantile(kstock, 0.05))
detach(grunfeld)

# Combine into a single list
ScenComb <- list(Scen1, Scen2, Scen3)
end.rcode-->

<p>In this example we won't introduce shocks, so now we run our simulations:</p>

<!--begin.rcode
Sim1 <- dynsim(obj = M1, ldv = 'InvestLag', 
                scen = ScenComb, n = 20)
end.rcode-->

<p>This took 1000 draws of the coefficients to produce 20 dynamic simulation iterations for each of the three scenarios. In the resulting <code>Sim1</code> object we have retained the middle 95% and 50%. We will return to presenting and exploring the contents of <code>Sim1</code> later.</p>

<h3>Dynamic simulation with shocks</h3>

<p>Now let's include fitted shock values. In particular, let's see how a company with capital stock in the 5th percentile is predicted to change its gross investment when its market value experiences shocks compared to a company with capital stock in the 95th percentile. We will use market values for the first company in the grunfeld data set over the first 15 years as the shock values. To create the shock data use the following code:</p>

<!--begin.rcode
# Keep only the mvalue for the first company 
# for the first 15 years
grunfeldsub <- subset(grunfeld, company == 1)
grunfeldshock <- grunfeldsub[1:15, 'mvalue']

# Create data frame for the shock argument
grunfeldshock <- data.frame(times = 1:15, 
                    mvalue = grunfeldshock)
end.rcode-->

<p>Now we can simply add <code>grunfeldshock</code> to the dynsim shocks argument.</p>

<!--begin.rcode
Sim2 <- dynsim(obj = M1, ldv = 'InvestLag', 
               scen = ScenComb, n = 15,
               shocks = grunfeldshock)
end.rcode-->

<p>Now we can simply add grunfeldshock to the dynsim <code>shocks</code> argument.</p>

<!--begin.rcode
Sim3 <- dynsim(obj = M1, ldv = 'InvestLag', 
               scen = ScenComb, n = 15,
               shocks = grunfeldshock)
end.rcode-->

<h3>Plotting simulations</h3>

<p>Probably the easiest and most effective way to communicate your <strong><code>dynsim</code></strong> simulation results is with the package’s built-in plotting capabilities. These are accessed with the <code>dysnsimGG</code> command. Let’s start by plotting the simulations from our basic model. In an earlier example we put these results into <code>Sim1</code>. Using <code>dynsimGG</code>'s default settings we can plot the simulations with the following code:
</p>

<!--begin.rcode Basic
dynsimGG(Sim1)
end.rcode-->

<p>We can make a number of aesthetic changes. For example, we can re-title the legend using the <code>leg.name</code> argument and change the legend values by adding a vector of the desired label names in the order of our scenarios using the <code>leg.labels</code> argument. We can also change the color palette using the <code>color</code> argument. Let’s use the 'orange-red' palette denoted by <code>OrRd</code>. Finally, we can change the y-axis label with the <code>ylab</code> argument so that it is more descriptive. 
</p>

<!--begin.rcode ColorScen
# Create legend labels vector
Labels <- c('95th Percentile', 'Mean', '5th Percentile')

# Plot
dynsimGG(Sim1, leg.name = 'Scenarios', 
         leg.labels = Labels, color = 'OrRd',
         ylab = 'Predicted Real Gross Investment\n')
end.rcode-->

<p>Plotting simulations with shock variables is very similar to what we have already seen. The one major change we can make is to include a plot of one shock variable’s fitted values underneath the main plot. To do this simply use the <code>shockplot.var</code> argument to specify which variable to plot. Use the <code>shockplot.ylab</code> argument to change the y-axis label. For example:
</p>

<!--begin.rcode ShockPlot
dynsimGG(Sim2, leg.name = 'Scenarios', leg.labels = Labels, 
            color = 'OrRd', 
            ylab = 'Predicted Real Gross Investment\n', 
            shockplot.var = 'mvalue',
            shockplot.ylab = 'Firm Value')
end.rcode-->

<p>Similarly, we can plot the simulations from scenarios where market value shocks were interacted with capital stock. The code is accomplish this is almost identical to the code chunk we just saw. The only difference is that we use the <code>Sim3</code> model object.
</p>

<!--begin.rcode InteractShock
dynsimGG(Sim3, leg.name = 'Scenarios', leg.labels = Labels, 
         color = 'OrRd',
         ylab = 'Predicted Real Gross Investment\n', 
         shockplot.var = 'mvalue',
         shockplot.ylab = 'Firm Value')
end.rcode-->

<h2 id="install">Install</h2>

<p><strong><code>dynsim</code></strong> for R is available on <a href="http://cran.r-project.org/web/packages/dynsim/index.html">CRAN</a>.</p>

<p>You can also easily install the latest development version with <a href="http://cran.r-project.org/web/packages/devtools/index.html">devtools</a> package:</p>

<!--begin.rcode eval=FALSE
devtools::install_github('christophergandrud/dynsim')
end.rcode-->

</div>

<!----------------------------- Stata ------------------------------>

<div class="tab-pane fade" id="Stata">
    <div class="alert alert-warning">
        <h3 align="center">The Stata Examples section is under development.</h3> 
    </div>
    <p>For more information about the Stata version of <strong><code>dynsim</code></strong> please see <a href="http://www.stata-journal.com/article.html?article=st0242">Williams and Whitten's (2011)</a>.</>   

<h2 id="exampleStata">Examples</h2>

<p>To see how dynsim works, let's go through a few examples. We will use the Grunfeld (1958) data set. You can download it with: <code>webuse grunfeld</code>.</p> 

<p>The linear regression model we will estimate is:</p>

\[I_{it} = \alpha + \beta_{1}I_{it-1} + \beta_{2}F_{it} + \beta_{3}C_{it} + \mu_{it} \]


<p>where \(I_{it}\) is real gross investment for firm \(i\) in year \(t\). \(I_{it-1}\) is the firm's investment in the previous year. \(F_{it}\) is the real value of the firm and \(C_{it}\) is the real value of the capital stock.</p>  

<p>In the <code>grunfeld</code> data set real gross investment is denoted <code>invest</code>, the one-year lag of this variable is <code>lag_invest</code>, the firm's market value is <code>mvalue</code>, and the capital stock is <code>kstock</code>. There are 10 large US manufacturers from 1935-1954 in the data set. The variable identifying the individual companies is called <code>company</code>.</p>

<p>We start by using <code>estsimp</code> to simulate 1,000 draws of each coefficient.</p>  


<!--begin.rcode eval=FALSE
estsimp reg invest lag_invest mvalue kstock
end.rcode-->

<p>We then use <code>dynsim</code> to produce 20 dynamic simulations (using the option <code>n(20)</code>) of each of the three scenarios, with the resulting predicted values and 95% confidence intervals (the default, changeable via the <code>sig</code> option) saved to a data set named ''<em>dynsim1</em>'' in the working directory.</p>

<p>Suppose that we want to simulate three different scenarios based on holding the firm's market value and value of the capital stock at its 5th percentile, mean, and 95th percentile, respectively. To do this we use the <code>scen</code> options (in the Stata version you can set up to 4 scenarios). We can also provide the starting value for the lagged dependent variable (in the <code>scen</code> options), which in this case is the sample mean. Here is the code:</p> 

<!--begin.rcode eval=FALSE
dynsim, ldv(lag_invest) 
        scen1(lag_invest mean mvalue p5 kstock p5) 
        scen2(mean)
        scen3(lag_invest mean mvalue p95 kstock p95) 
        n(20) 
        saving(dynsim1)
end.rcode-->

<p>We can present the predicted values (and confidence intervals) in the new <em>dynsim1</em> data set in a variety of ways. We have found that Stata’s <code>twoway rcap</code> is a simple way of demonstrating the predicted values and uncertainty. It gives us plots like this:</p>

<div class="rimage center"><img src="figure/BasicStata.png" alt="Basic Stata dynsim"></div>

</div>

</div>


<!----------------------------- Comments ------------------------------>


<br/>

<div id="rect01"></div>

<br/>

<div id="maindescript">

<div id="disqus_thread"></div>
<script type="text/javascript">
    /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
    var disqus_shortname = 'dynsim'; // required: replace example with your forum shortname

    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
    
</div>
</div>
<!----------------------------- Footer ------------------------------>
<afooter>
<hr>

    <p><a href="https://github.com/christophergandrud">Christopher Gandrud <i class="fa fa-github fa-lg"></i></a> <a href="https://twitter.com/ChrisGandrud"><i class="fa fa-twitter"></i></a></p>

    <p><strong><code>dynsim</code></strong> is covered under the <a href="https://www.gnu.org/licenses/quick-guide-gplv3.html">GPL-3 license</a>.</p>

    <p>This site is covered under a <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">CC By-NC-SA 4.0 License</a> and relies on <a href="http://getbootstrap.com/">Bootstrap</a>.</p> 

    <a href="http://nadrosia.tumblr.com/post/53520500877/made-in-berlin-badge-update"><img alt="BerlinBadge" src="http://media.tumblr.com/023c285c14ef01953d3b67ffe789004d/tumblr_inline_mor1uu2OOZ1qz4rgp.png" width = "100"></a>

</footer>
<!----------------------------- Scripts ----------------------------->

<!-- Tabs with Bootstrap -->

<script type="text/javascript" src="js/jQuery.min.js"></script>
<script type="text/javascript" src="js/bootstrap.min.js"></script>

<script>
  $(function () {
    $('#Basic a:first').tab('show')
  })
</script>

<!-- dynamically load mathjax for compatibility with --self-contained -->
<script>
  (function () {
    var script = document.createElement("script");
    script.type = "text/javascript";
    script.src  = "https://c328740.ssl.cf1.rackcdn.com/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML";
    document.getElementsByTagName("head")[0].appendChild(script);
  })();
</script>

<!-- Google Analytics tracking -->
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-48683594-1', 'christophergandrud.github.io');
  ga('send', 'pageview');

</script>

</html>
